shadow$provide.module$node_modules$$fluentui$react_component_event_listener$dist$commonjs$useEventListener=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");exports.__esModule=!0;exports.useEventListener=void 0;var React=global(require("module$node_modules$react$index"));exports.useEventListener=function(options){var capture=options.capture,listener=options.listener,type=options.type,target=options.target,targetRef=options.targetRef,
latestListener=React.useRef(listener);latestListener.current=listener;var eventHandler=React.useCallback(function(event){return latestListener.current(event)},[]);React.useEffect(function(){if("undefined"!==typeof target&&"undefined"!==typeof targetRef)throw Error("`target` and `targetRef` props are mutually exclusive, please use one of them.");if("undefined"===typeof target&&"undefined"===typeof targetRef)throw Error("`target` and `targetRef` props are `undefined`, it' required to use one of them.");
},[target,targetRef]);React.useEffect(function(){var element="undefined"===typeof targetRef?target:targetRef.current,currentEvent=window.event,conditionalHandler=function(event){event===currentEvent?currentEvent=void 0:eventHandler(event)};if(element&&element.addEventListener)element.addEventListener(type,conditionalHandler,capture);else throw Error("@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `addEventListener()` method.");return function(){if(element&&
element.removeEventListener)element.removeEventListener(type,conditionalHandler,capture);else throw Error("@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `removeEventListener()` method.");}},[capture,eventHandler,target,targetRef,type])}}
//# sourceMappingURL=module$node_modules$$fluentui$react_component_event_listener$dist$commonjs$useEventListener.js.map
